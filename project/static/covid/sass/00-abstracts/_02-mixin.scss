// Bootstrap 4 Mixins
/// Grid system
//
// Generate semantic grid columns with these mixins.

@mixin make-container($gutter: $grid-gutter-width) {
  width: 100%;
  padding-right: $gutter / 2;
  padding-left: $gutter / 2;
  margin-right: auto;
  margin-left: auto;
}


// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
  @each $breakpoint, $container-max-width in $max-widths {
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      max-width: $container-max-width;
    }
  }
}

@mixin make-row($gutter: $grid-gutter-width) {
  display: flex;
  flex-wrap: wrap;
  margin-right: -$gutter / 2;
  margin-left: -$gutter / 2;
}

@mixin make-col-ready($gutter: $grid-gutter-width) {
  position: relative;
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we use `flex` values
  // later on to override this initial width.
  width: 100%;
  padding-right: $gutter / 2;
  padding-left: $gutter / 2;
}

@mixin make-col($size, $columns: $grid-columns) {
  flex: 0 0 percentage($size / $columns);
  // Add a `max-width` to ensure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.
  max-width: percentage($size / $columns);
}

@mixin make-col-offset($size, $columns: $grid-columns) {
  $num: $size / $columns;
  margin-left: if($num == 0, 0, percentage($num));
}




// Color
@mixin colors($color, $class) {
    %#{$class} {
        color: $color;
    }
    %#{$class}-bg {
        background-color: $color;
    }
    %#{$class}-bo {
        border-color: $color !important;
    }
}

// Gradients
@mixin vertical-gradient($from, $to) {
    background: $from;
    background: -moz-linear-gradient(top, $from 0%, $to 100%);
    background: -webkit-linear-gradient(top, $from 0%,$to 100%);
    background: linear-gradient(to bottom, $from 0%,$to 100%);
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$from}', endColorstr='#{$to}',GradientType=0);
}

@mixin horizontal-gradient($from, $to) {
    background: $from;
    background: -moz-linear-gradient(left, $from 0%, $to 100%);
    background: -webkit-linear-gradient(left, $from 0%,$to 100%);
    background: linear-gradient(to right, $from 0%,$to 100%);
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$from}', endColorstr='#{$to}',GradientType=1);
}
    
@mixin angle-gradient($angle, $from, $to) {
    background: -moz-linear-gradient(#{$angle}deg, $from 0%, $to 100%);
    background: -webkit-gradient(linear, left bottom, right top, color-stop(0%, $from), color-stop(100%, $to));
    background: -webkit-linear-gradient(#{$angle}deg, $from 0%, $to 100%);
    background: -o-linear-gradient(#{$angle}deg, $from 0%, $to 100%);
    background: -ms-linear-gradient(#{$angle}deg, $from 0%, $to 100%);
    background: linear-gradient(#{$angle}deg, $from 0%, $to 100%);
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$from}', endColorstr='#{$to}',GradientType=1);
}
    
// Transition
@mixin transition($value, $transition-name) {
    -webkit-transition: $value $transition-name; 
    transition: $value $transition-name;
}  
    
// FontAwesome Icon 
@mixin fa($icon) {
    font-family: 'FontAwesome';
    content: $icon;
}
    
// Media Queries
// Extra Small Devices (less than 380px)
@mixin mobileXs() {
    @media only screen and (max-width: 379px) {
        @content;
    }   
}
    
// Small Devices (less than 480px) 
@mixin mobileSm()  {
    @media only screen and (max-width: 479px) {
        @content;
    }
}
      
// Medium Devices (less than 576px)
@mixin mobileMd() {
    @media only screen and (max-width: 575px) {
        @content;
    }
}
      
// Medium Devices (less than 768px)
@mixin mobileLg() {
    @media only screen and (max-width: 767px) {
        @content;
    }  
}
    
// Medium Devices (less than 991px)
@mixin tab() {
    @media only screen and (max-width:991px) {
        @content;
    }
}
    
// Large Devices (less than 1200px)
@mixin medium() {
    @media only screen and (max-width: 1199px) {
        @content; 
    }
}
     
// Extra Large Devices (More than 1200px)
@mixin large() {
    @media only screen and (min-width: 1200px) {
        @content; 
    }
}
    
// Custom Devices
@mixin customMin($min-width) {
  @media only screen and (min-width: #{$min-width}px) {
    @content;
  }
}

@mixin customMax($max-width) {
  @media only screen and (max-width: #{$max-width}px) {
    @content;
  }
}